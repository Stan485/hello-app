# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1z9RkEJB-09k1DiHlGw-fbA7kWRuH4aI4
"""

import pandas as pd

df=pd.read_csv('/content/Social Media Users.csv')

df.head()

df.tail()

df.info()

df.describe()

df.isnull().sum()

df.shape

import matplotlib.pyplot as plt

import matplotlib.pyplot as plt
import seaborn as sns  # Also needed for sns.barplot
import pandas as pd

# Assuming df is already defined and loaded
plt.figure(figsize=(10, 6))
sns.barplot(data=df, x='Platform', y='Daily Time Spent (min)', estimator='mean', palette='Blues_d')
plt.title('Average Daily Time Spent per Platform')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 3. Top 5 countries with most users
df['Country'].value_counts().head(5)

# 2. Count of users per platform
df['Platform'].value_counts()

import pandas as pd

df = pd.read_csv('/content/Social Media Users.csv')  # adjust path if needed

df['Verified Account'].value_counts()

df.groupby('Owner')['Platform'].count()

df['Daily Time Spent (min)'].min()

df['Daily Time Spent (min)'].max()

df[df['Daily Time Spent (min)'] < 30]

import pandas as pd

df = pd.read_csv("/content/Social Media Users.csv")

df.isnull().sum()

for col in df.columns:
    print(f"{col}: {df[col].nunique()} unique values")
    print(df[col].unique()[:10])
    print("-" * 40)

df.columns = df.columns.str.strip()

df['Date Joined'] = pd.to_datetime(df['Date Joined'])
df['Join_Year'] = df['Date Joined'].dt.year
df['Account_Age'] = 2025 - df['Join_Year']

df['Platform'].value_counts()

df = df.drop(['Date Joined', 'Join_Year'], axis=1)

df['Verified Account'] = df['Verified Account'].map({'Yes': 1, 'No': 0})

df_encoded = pd.get_dummies(df, columns=['Owner', 'Primary Usage', 'Country'], drop_first=True)

X = df_encoded.drop('Platform', axis=1)
y = df_encoded['Platform']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, stratify=y, random_state=42
)

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

# Initialize and train
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)

# Predictions
y_pred = rf_model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

import matplotlib.pyplot as plt

import pandas as pd
import numpy as np

importances = rf_model.feature_importances_
feature_names = X.columns
feature_importance_df = pd.DataFrame({'Feature': feature_names, 'Importance': importances})
feature_importance_df = feature_importance_df.sort_values(by='Importance', ascending=False)

# Plot top 20 features
plt.figure(figsize=(12, 8))
sns.barplot(data=feature_importance_df.head(20), x='Importance', y='Feature')
plt.title("Top 20 Most Important Features for Platform Prediction")
plt.tight_layout()
plt.show()

from sklearn.metrics import accuracy_score, classification_report, ConfusionMatrixDisplay

# Predictions already made as: y_pred
print("Accuracy:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))

# Optional: Visual confusion matrix
ConfusionMatrixDisplay.from_estimator(rf_model, X_test, y_test, xticks_rotation=45, cmap='Blues')
plt.title("Confusion Matrix")
plt.show()

from sklearn.model_selection import cross_val_score
import numpy as np

scores = cross_val_score(rf_model, X, y, cv=5, scoring='accuracy')
print("Cross-validation scores:", scores)
print("Mean accuracy:", np.mean(scores))

def predict_platform(model, owner, usage, country, time_spent, verified, account_age):
    input_df = pd.DataFrame([{
        'Owner_' + owner: 1,
        'Primary Usage_' + usage: 1,
        'Country_' + country: 1,
        'Daily Time Spent (min)': time_spent,
        'Verified Account': 1 if verified == 'Yes' else 0,
        'Account_Age': account_age
    }])

    # Ensure all missing columns are filled with 0
    for col in X.columns:
        if col not in input_df:
            input_df[col] = 0

    input_df = input_df[X.columns]  # Align with training data
    return model.predict(input_df)[0]

from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

label_encoder = LabelEncoder()
y_encoded = label_encoder.fit_transform(y)

X_train, X_test, y_train_encoded, y_test_encoded = train_test_split(
    X, y_encoded, test_size=0.2, stratify=y_encoded, random_state=42
)

from xgboost import XGBClassifier

xgb_model = XGBClassifier(use_label_encoder=False, eval_metric='mlogloss')
xgb_model.fit(X_train, y_train_encoded)

y_pred_encoded = xgb_model.predict(X_test)
y_pred_labels = label_encoder.inverse_transform(y_pred_encoded)
y_test_labels = label_encoder.inverse_transform(y_test_encoded)

from sklearn.metrics import accuracy_score, classification_report, ConfusionMatrixDisplay

print("XGBoost Accuracy:", accuracy_score(y_test_labels, y_pred_labels))
print("\nClassification Report:\n", classification_report(y_test_labels, y_pred_labels))

ConfusionMatrixDisplay.from_predictions(y_test_labels, y_pred_labels, xticks_rotation=45, cmap='Blues')
plt.title("XGBoost Confusion Matrix")
plt.show()

import joblib

# Save the trained model (replace rf_model with your model name if needed)
joblib.dump(rf_model, "platform_prediction_model.pkl")

# Save the features used to train the model
joblib.dump(X.columns.tolist(), "model_features.pkl")

from google.colab import files

# Download both files
files.download("platform_prediction_model.pkl")
files.download("model_features.pkl")

